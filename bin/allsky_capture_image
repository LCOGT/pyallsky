#!/usr/bin/env python

'''
Take an image using an SBIG AllSky 340/340C camera

This can read from a real camera, or from a previously saved RAW file.
In both cases, it will take the raw source image, postprocess it, and
save it in any other desired formats.
'''

import os
import sys
import stat
import logging
import argparse
import traceback

from pyallsky import AllSkyDeviceConfiguration
from pyallsky import AllSkyImageProcessor
from pyallsky import capture_image_device
from pyallsky import capture_image_file
from pyallsky import is_supported_file_type
from pyallsky.util import setup_logging

def is_character_device(filename):
    '''Is this file a character device (serial port)'''
    return stat.S_ISCHR(os.stat(filename).st_mode)

def main():
    '''Main Method'''

    desc = '''Capture an image from an SBIG AllSky 340/340C'''
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-s', '--source', help='Source serial device or RAW file (detected automatically)')
    parser.add_argument('-d', '--debayer', action='store_true', help='Run debayer algorithm for Color CCD')
    parser.add_argument('-e', '--exposure', type=float, help='Exposure time in seconds', default=1.0)
    parser.add_argument('-g', '--grayscale', action='store_true', help='Save JPEG images as grayscale')
    parser.add_argument('-o', '--overlay', action='store_true', help='Save JPEG images with overlay')
    parser.add_argument('-p', '--postprocess', action='store_true', help='Postprocess JPEG images')
    parser.add_argument('-r', '--rotate180', action='store_true', help='Rotate image 180 degrees after capture')
    parser.add_argument('-v', '--verbose', action='count', help='Enable script debugging', default=0)
    parser.add_argument('filename', help='Save image as these filename(s)', nargs='+')
    args = parser.parse_args()

    # logging levels
    if args.verbose >= 2:
        setup_logging(logging.DEBUG)
    elif args.verbose >= 1:
        setup_logging(logging.INFO)
    else:
        setup_logging(logging.WARN)

    # check filename extension on each file
    for filename in args.filename:
        if os.path.exists(filename):
            logging.error('Output file already exists: %s', filename)
            sys.exit(1)

        if not is_supported_file_type(filename):
            logging.error('Unknown file format requested: %s', filename)
            sys.exit(1)

    # create device configuration object
    d = {}
    d['device'] = args.source
    d['exposure'] = args.exposure
    d['dark'] = False
    d['debayer'] = args.debayer
    d['grayscale'] = args.grayscale
    d['postprocess'] = args.postprocess
    d['rotate180'] = args.rotate180
    d['overlay'] = args.overlay
    device_config = AllSkyDeviceConfiguration(**d)

    try:
        # figure out which capture_image variant to use
        capture_image = capture_image_file
        if is_character_device(device_config.device):
            capture_image = capture_image_device

        # capture (or load) the image
        image = capture_image(device_config.device, device_config.exposure)

        # create the image processor
        processor = AllSkyImageProcessor(image, device_config, dark=None)

        # save to all file types requested
        for filename in args.filename:
            logging.info('Saving to file %s', filename)
            processor.save(filename)

    except Exception as ex:
        logging.error('Exception: %s', str(ex))
        for line in traceback.format_exc().splitlines():
            logging.error(line)

        sys.exit(1)

if __name__ == '__main__':
    main()
